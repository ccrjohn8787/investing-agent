#!/usr/bin/env python3
"""Interactive setup script for .env file."""

import os
import sys
from pathlib import Path

def setup_env():
    """Interactive setup for .env file."""
    
    env_file = Path('.env')
    env_example = Path('.env.example')
    
    print("="*60)
    print("INVESTING AGENT - ENVIRONMENT SETUP")
    print("="*60)
    print()
    
    # Check if .env already exists
    if env_file.exists():
        print("‚úÖ .env file already exists")
        response = input("Do you want to update it? (y/n): ").lower()
        if response != 'y':
            print("Setup cancelled.")
            return
        print()
    
    # Get OpenAI key
    print("Step 1: OpenAI API Key (Required)")
    print("Get your key from: https://platform.openai.com/api-keys")
    openai_key = input("Enter your OpenAI API key (sk-...): ").strip()
    
    if not openai_key:
        print("‚ùå OpenAI key is required. Setup cancelled.")
        return
    
    print()
    print("Step 2: Anthropic API Key (Optional)")
    print("Get your key from: https://console.anthropic.com/")
    anthropic_key = input("Enter your Anthropic key (or press Enter to skip): ").strip()
    
    print()
    print("Step 3: Configuration Options")
    debug = input("Enable debug logging? (y/n) [n]: ").lower() == 'y'
    cost_tracking = input("Enable cost tracking? (y/n) [y]: ").lower() != 'n'
    
    # Write .env file
    content = f"""# Investing Agent Environment Configuration
# Generated by setup_env.py

# Required for LLM functionality
OPENAI_API_KEY={openai_key}

# Optional: For premium narratives with Claude
ANTHROPIC_API_KEY={anthropic_key if anthropic_key else 'your-anthropic-key-here'}

# Configuration
LLM_DEBUG={'true' if debug else 'false'}
LLM_COST_TRACKING={'true' if cost_tracking else 'false'}

# Optional: Default ticker for reports
CT=META

# Optional: SEC EDGAR User Agent (your email)
EDGAR_UA=your-email@example.com
"""
    
    env_file.write_text(content)
    print()
    print("‚úÖ .env file created successfully!")
    print()
    
    # Test the setup
    print("Testing API connectivity...")
    sys.path.insert(0, str(Path(__file__).parent.parent))
    
    try:
        from investing_agent.config import load_env_file
        loaded = load_env_file()
        
        if loaded and os.getenv('OPENAI_API_KEY'):
            print(f"‚úÖ Environment loaded from: {loaded}")
            print("‚úÖ OpenAI API key is set")
            
            # Try a test call
            from investing_agent.llm.provider import LLMProvider
            try:
                provider = LLMProvider()
                # Note: This will fail with NotImplementedError but that's OK
                # It means the provider is loading correctly
                print("‚úÖ LLM Provider initialized")
            except NotImplementedError:
                print("‚úÖ LLM Provider ready (live calls not implemented in base provider)")
            
            print()
            print("üéâ Setup complete! You can now run:")
            print("   python scripts/generate_full_report.py META --output-dir out")
        else:
            print("‚ö†Ô∏è Warning: Could not verify setup")
    except Exception as e:
        print(f"‚ö†Ô∏è Warning during test: {e}")
        print("   But .env file was created. Try running a report to test.")

if __name__ == "__main__":
    setup_env()