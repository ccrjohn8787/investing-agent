from __future__ import annotations

from datetime import datetime
from typing import Optional

from investing_agent.schemas.inputs import InputsI
from investing_agent.schemas.valuation import ValuationV


def render_report(
    I: InputsI,
    V: ValuationV,
    sensitivity_png: Optional[bytes] = None,
    driver_paths_png: Optional[bytes] = None,
) -> str:
    """Create a Markdown report. Writer has read-only access to inputs and valuation."""
    lines = []
    lines.append(f"# Investing Agent Valuation â€” {I.company} ({I.ticker})")
    lines.append("")
    lines.append(f"As of: {I.asof_date or 'N/A'}  ")
    lines.append(f"Currency: {I.currency}")
    lines.append("")
    lines.append("## Summary")
    lines.append(f"- Value per share: {V.value_per_share:,.2f}")
    lines.append(f"- Equity value: {V.equity_value:,.0f}")
    lines.append(f"- PV (explicit): {V.pv_explicit:,.0f}")
    lines.append(f"- PV (terminal): {V.pv_terminal:,.0f}")
    lines.append(f"- Shares out: {V.shares_out:,.0f}")
    lines.append("")
    lines.append("## Drivers")
    lines.append(f"- Discounting: {I.discounting.mode}")
    lines.append(f"- Stable growth: {I.drivers.stable_growth:.2%}")
    lines.append(f"- Stable margin: {I.drivers.stable_margin:.2%}")
    lines.append(f"- Sales-to-capital (last): {I.sales_to_capital[-1]:.2f}")
    lines.append(f"- WACC (last): {I.wacc[-1]:.2%}")
    lines.append("")
    lines.append("## Provenance")
    pv = I.provenance
    if pv.source_url or pv.vendor:
        lines.append(f"- Vendor: {pv.vendor or 'unknown'}")
        if pv.source_url:
            lines.append(f"- Source: {pv.source_url}")
        if pv.retrieved_at:
            lines.append(f"- Retrieved: {pv.retrieved_at}")
        if pv.content_sha256:
            lines.append(f"- SHA-256: `{pv.content_sha256}`")
    else:
        lines.append("- No provenance provided (synthetic or local inputs)")
    lines.append("")
    lines.append("_Generated by Investing Agent. This report is deterministic given the same inputs._")
    return "\n".join(lines)

